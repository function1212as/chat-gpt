{"version":3,"file":"js/28.ba4f3ee3.js","mappings":"oPACE,QAA0C,GAA3BA,KAAM,EAAAA,MAAI,gB,eAK3B,GACEC,KAAM,0BACN,KAAAC,GACE,MAAMF,GAAO,QACX,iXAEF,MAAO,CAAEA,OACX,G,UCRF,MAAMG,GAA2B,OAAgB,EAAQ,CAAC,CAAC,SAASC,KAEpE,O","sources":["webpack://chat-gtp/./src/components/MarkdownPracticeDisplay.vue","webpack://chat-gtp/./src/components/MarkdownPracticeDisplay.vue?decd"],"sourcesContent":["<template>\n  <v-md-preview :text=\"text\"></v-md-preview>\n</template>\n\n<script>\nimport { ref } from \"vue\";\nexport default {\n  name: \"MarkdownPracticeDisplay\",\n  setup() {\n    const text = ref(\n      \"\\n\\n递归是指函数调用自身的过程。下面是一个使用 JavaScript 编写的递归函数示例：\\n\\n```javascript\\nfunction factorial(n) {\\n  if (n === 0) { // 基线条件\\n    return 1;\\n  } else { // 递归条件\\n    return n * factorial(n - 1);\\n  }\\n}\\n\\nconsole.log(factorial(5)); // 输出 120\\n```\\n\\n这个函数计算了一个数的阶乘。当 `n` 等于 0 时，函数返回 1，这是递归的基线条件。否则，函数将 `n` 乘以 `factorial(n - 1)` 的结果，这是递归条件。因此，函数将一直递归调用自身，直到 `n` 等于 0，然后返回最终结果。\"\n    );\n    return { text };\n  },\n};\n</script>\n\n<style scoped></style>\n","import { render } from \"./MarkdownPracticeDisplay.vue?vue&type=template&id=706943f2\"\nimport script from \"./MarkdownPracticeDisplay.vue?vue&type=script&lang=js\"\nexport * from \"./MarkdownPracticeDisplay.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/.pnpm/registry.npmmirror.com+vue-loader@17.2.2_@vue+compiler-sfc@3.3.4_vue@3.2.13_webpack@5.88.2/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["text","name","setup","__exports__","render"],"sourceRoot":""}